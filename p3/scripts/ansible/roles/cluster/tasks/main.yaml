---
- name: Install dependencies
  ansible.builtin.apt:
    name:
      - curl
      - ca-certificates
      - apt-transport-https
      - python3-yaml
      - python3-jsonpatch
    state: present

- name: Install k3d
  ansible.builtin.shell: |
    curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash

- name: Install kubectl
  become: yes
  ansible.builtin.shell: |
    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

- name: Install helm
  become: yes
  block:
    - name: Check if key exists
      ansible.builtin.stat:
        path: /usr/share/keyrings/helm.gpg
      register: helm_keyring

    - name: Add helm key
      ansible.builtin.shell: |
        curl https://baltocdn.com/helm/signing.asc | gpg --dearmor > /usr/share/keyrings/helm.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" > /etc/apt/sources.list.d/helm-stable-debian.list
      when: not helm_keyring.stat.exists

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes
      when: not helm_keyring.stat.exists

    - name: Install helm
      ansible.builtin.apt:
        name: helm
        state: present

- name: Install k3d cluster
  become: yes
  block:
    - name: Delete cluster if it exists
      ansible.builtin.shell: k3d cluster delete "{{ cluster_name }}" || true
    - name: Create k3d cluster
      ansible.builtin.shell: |
        k3d cluster create "{{ cluster_name }}" --api-port 6550 --k3s-arg "--disable=traefik@server:0" --k3s-arg "--disable=servicelb@server:0" --no-lb --wait

- name: Install and configure metallb
  become: yes
  block:
    - name: Download metallb manifest
      ansible.builtin.shell: |
        curl -fsSL https://raw.githubusercontent.com/metallb/metallb/v0.14.9/config/manifests/metallb-native.yaml -o ~/metallb-native.yaml
        chmod 0664 ~/metallb-native.yaml

    - name: Apply metallb manifest to the cluster
      kubernetes.core.k8s:
        state: present
        src: ~/metallb-native.yaml

    - name: Get load balancer ip range
      ansible.builtin.shell: |
        cluster_name="k3d-{{ cluster_name }}"
        cidr_block=$(docker network inspect $cluster_name | jq -r '.[0].IPAM.Config[0].Subnet')
        cidr_base_addr=${cidr_block%???}
        ingress_first_addr=$(echo $cidr_base_addr | awk -F'.' '{print $1,$2,255,2}' OFS='.')
        ingress_last_addr=$(echo $cidr_base_addr | awk -F'.' '{print $1,$2,255,254}' OFS='.')
        ingress_range=$ingress_first_addr-$ingress_last_addr
        echo "$ingress_range"
      register: ingress_range

    - name: Wait until all pods are running in metallb namespace
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: metallb-system
      register: pod_info
      until: >
        pod_info.resources | selectattr('status.phase', 'equalto', 'Running') | list | length == pod_info.resources | length
      retries: 2
      delay: 60

    - name: Configure metallb IPAddressPool
      kubernetes.core.k8s:
        state: present
        apply: yes
        definition:
          apiVersion: metallb.io/v1beta1
          kind: IPAddressPool
          metadata:
              name: default
              namespace: metallb-system
          spec:
              addresses:
               - "{{ ingress_range.stdout }}"
              autoAssign: true
              avoidBuggyIPs: true

    - name: Configure metallb L2Advertisement
      kubernetes.core.k8s:
        state: present
        apply: yes
        definition:
          apiVersion: metallb.io/v1beta1
          kind: L2Advertisement
          metadata:
            name: l2advertisement
            namespace: metallb-system
          spec:
            ipAddressPools:
              - default

- name: Install nginx ingress controller
  become: yes
  block:
    - name: Download manifest
      ansible.builtin.shell: |
        curl -fsSL https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.12.0/deploy/static/provider/aws/deploy.yaml -o ~/nginx-deploy.yaml
        chmod 0664 ~/nginx-deploy.yaml

    - name: Apply nginx controller manifest to the cluster.
      kubernetes.core.k8s:
        state: present
        src: ~/nginx-deploy.yaml

- name: Get LoadBalancer IP
  ansible.builtin.shell: |
    kubectl -n ingress-nginx describe svc ingress-nginx-controller | grep "LoadBalancer Ingress" | awk '{print $3}'
  register: lb_ip

- name: Set iptable rules
  block:
    - ansible.builtin.iptables:
        chain: FORWARD
        protocol: tcp
        destination: "{{ lb_ip.stdout }}"
        jump: ACCEPT
        state: present
    - ansible.builtin.iptables:
        table: nat
        chain: PREROUTING
        protocol: tcp
        destination_port: 80
        in_interface: eth0
        jump: DNAT
        to_destination: "{{ lb_ip.stdout }}:80"
        state: present
